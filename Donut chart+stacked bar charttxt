You can describe this observation in a formal and concise manner as follows:

"From the graph, it is observed that both net loss and event frequency peaked during the 2021-2022 period. This indicates a simultaneous increase in the severity of losses and the volume of incidents during this time, which contrasts with the trends seen before and after this period."

Alternatively:

"The graph reveals that the period between 2021 and 2022 experienced higher net loss and event frequency, suggesting a peak in both the financial impact and the number of incidents during this time. Following this, both metrics showed a decline or stabilization."

This clearly communicates the peak in both variables during the 2021-2022 period. Would you like to explore the potential reasons behind this peak or analyze it further?







How to say a trends in line or decline
ChatGPT said:
ChatGPT
To describe trends as being in line or showing a decline, you can use specific language based on the data's movement over time. Hereâ€™s how you can frame both trends:

For a Stable or In-Line Trend:
"The net loss trend has remained consistent over the period from 2019 to 2024."
"The data shows a stable trend with no significant increase or decrease in net loss between 2019 and 2024."
"Net losses have remained relatively unchanged, indicating no substantial deviation from the previous year's patterns."
For a Declining Trend:
"There is a clear downward trend in net losses from 2019 to 2024."
"The data indicates a steady decline in net loss over the observed period, suggesting improvements in risk management."
"From 2019 to 2024, net losses have shown a consistent decrease, reflecting a positive shift in operational performance."
Would you like to explore how to represent this trend with specific metrics or visualizations?






You said:
Net loss is declineing from nearby year but the event frequencies are increasing in 202 and then after that it is getting line trend how to write this
ChatGPT said:
ChatGPT
To describe this scenario, where net loss is declining but event frequencies are increasing in 2022 before stabilizing, you could frame it like this:

"The net loss has shown a declining trend over the period from 2019 to 2024, with a noticeable reduction in recent years. However, event frequencies increased sharply in 2022, indicating a rise in incidents, before stabilizing and returning to a more consistent trend thereafter. This suggests that while the severity of losses is decreasing, the volume of incidents initially surged before reaching a steady state."

Alternatively, you could say:

"Although net losses have been on a downward trajectory since 2019, event frequencies experienced a significant uptick in 2022, indicating a rise in the number of incidents. This increase in event frequency was followed by a period of stabilization, with frequencies returning to a consistent, stable trend from 2023 onward."

This highlights both the decline in net loss and the fluctuation in event frequencies over time. Would you like assistance with visualizing this trend?











ChatGPT can make mistakes. Check#stacked bar chart 
#yearwise value and percenatge on bar grapgh

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

business_lines = ["Retail", "Corporate Banking", "Investment Banking", "Insurance"]
event_types = ["Fraud", "System Failure", "Theft", "Compliance"]

# Generate synthetic data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Net Loss Amount": np.random.uniform(-10000, 10000, num_records)
}
df = pd.DataFrame(data)
df['Year'] = pd.to_datetime(df['Date']).dt.year

# Handle negative Net Loss Amount
df['Net Loss Amount (Adjusted)'] = df['Net Loss Amount'].apply(lambda x: max(x, 0))  # Replace negative losses with 0

# Group by Business Line and Year with adjusted losses
grouped = df.groupby(['Business Line', 'Year']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount (Adjusted)': 'sum'  # Adjusted Net Loss Amount
}).reset_index()

# Rename columns for clarity
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate bar charts
business_lines = grouped['Business Line'].unique()

for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Calculate total counts and losses for percentage calculation
    total_event_count = business_line_data['Event Count'].sum()
    total_net_loss = business_line_data['Net Loss Amount (Adjusted)'].sum()
    
    # Calculate percentages
    business_line_data['Event Count Percentage'] = business_line_data['Event Count'] / total_event_count * 100
    business_line_data['Net Loss Amount Percentage'] = business_line_data['Net Loss Amount (Adjusted)'] / total_net_loss * 100
    
    # Create subplots for Adjusted Net Loss Amount and Event Count
    fig, axes = plt.subplots(1, 2, figsize=(16, 8))

    # Bar chart for Adjusted Net Loss Amount
    axes[0].bar(business_line_data['Year'], business_line_data['Net Loss Amount (Adjusted)'], color='salmon', label='Net Loss Amount')
    for i, value in enumerate(business_line_data['Net Loss Amount (Adjusted)']):
        axes[0].text(
            business_line_data['Year'].iloc[i], value, 
            f'${value:,.2f}\n({business_line_data["Net Loss Amount Percentage"].iloc[i]:.1f}%)', 
            ha='center', va='bottom'
        )
    axes[0].set_title(f"{business_line} - Adjusted Net Loss Amount by Year", fontsize=14)
    axes[0].set_xlabel('Year', fontsize=12)
    axes[0].set_ylabel('Net Loss Amount ($)', fontsize=12)
    axes[0].legend(loc='upper left', fontsize=10)

    # Bar chart for Event Count
    axes[1].bar(business_line_data['Year'], business_line_data['Event Count'], color='skyblue', label='Event Count')
    for i, value in enumerate(business_line_data['Event Count']):
        axes[1].text(
            business_line_data['Year'].iloc[i], value, 
            f'{value}\n({business_line_data["Event Count Percentage"].iloc[i]:.1f}%)', 
            ha='center', va='bottom'
        )
    axes[1].set_title(f"{business_line} - Event Count by Year", fontsize=14)
    axes[1].set_xlabel('Year', fontsize=12)
    axes[1].set_ylabel('Event Count', fontsize=12)
    axes[1].legend(loc='upper left', fontsize=10)

    # Adjust layout and display
    plt.tight_layout()
    plt.show()
###33
#in single grapgh both value and percentage bar with line value and percentage
#as per my data set
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 10000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Adjust negative Net Loss Amounts to zero
df['Net Loss Amount'] = df['Net Loss Amount'].clip(lower=0)

# Extract Year-Month for monthly aggregation
df['Month'] = df['Date'].dt.to_period('M')

# Group by Business Line and Month
monthly_data = df.groupby(['Business Line', 'Month']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'
}).reset_index()

# Rename columns for clarity
monthly_data.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Convert Month back to datetime for proper plotting
monthly_data['Month'] = monthly_data['Month'].dt.to_timestamp()

# Plotting for each Business Line
business_lines = monthly_data['Business Line'].unique()
fig, axes = plt.subplots(len(business_lines), 1, figsize=(15, 5 * len(business_lines)))

for idx, business_line in enumerate(business_lines):
    ax = axes[idx]
    ax2 = ax.twinx()

    # Filter data for the current business line
    business_line_data = monthly_data[monthly_data['Business Line'] == business_line]

    # Plot Net Loss Amount (left y-axis)
    ax.bar(
        business_line_data['Month'], 
        business_line_data['Net Loss Amount'], 
        color='salmon', alpha=0.7, label='Net Loss Amount'
    )
    for i, value in enumerate(business_line_data['Net Loss Amount']):
        ax.text(
            business_line_data['Month'].iloc[i], value, 
            f"${value:,.0f}", ha='center', va='bottom', fontsize=8, rotation=90
        )

    # Plot Event Count (right y-axis)
    ax2.plot(
        business_line_data['Month'], 
        business_line_data['Event Count'], 
        marker='o', color='skyblue', label='Event Count'
    )
    for i, value in enumerate(business_line_data['Event Count']):
        ax2.text(
            business_line_data['Month'].iloc[i], value, 
            f"{value}", ha='center', va='bottom', fontsize=8, color='blue', rotation=90
        )

    # Titles and labels
    ax.set_title(f"{business_line} - Monthly Net Loss and Event Count", fontsize=14, fontweight='bold')
    ax.set_xlabel('Month', fontsize=12)
    ax.set_ylabel('Net Loss Amount ($)', fontsize=12, color='salmon')
    ax2.set_ylabel('Event Count', fontsize=12, color='blue')

    # Fix x-axis to show only months
    ax.set_xticks(business_line_data['Month'])
    ax.set_xticklabels(business_line_data['Month'].dt.strftime('%b %Y'), rotation=45, fontsize=10)

    # Legends
    ax.legend(loc='upper left', fontsize=10)
    ax2.legend(loc='upper right', fontsize=10)

    # Grid
    ax.grid(axis='y', linestyle='--', alpha=0.7)

# Adjust layout
plt.tight_layout()
plt.show()
##
no label
#withgou labe;l
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 10000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Adjust negative Net Loss Amounts to zero
df['Net Loss Amount'] = df['Net Loss Amount'].clip(lower=0)

# Extract Year-Month for monthly aggregation
df['Month'] = df['Date'].dt.to_period('M')

# Group by Business Line and Month
monthly_data = df.groupby(['Business Line', 'Month']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'
}).reset_index()

# Rename columns for clarity
monthly_data.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Convert Month back to datetime for proper plotting
monthly_data['Month'] = monthly_data['Month'].dt.to_timestamp()

# Plotting for each Business Line
business_lines = monthly_data['Business Line'].unique()
fig, axes = plt.subplots(len(business_lines), 1, figsize=(15, 5 * len(business_lines)))

for idx, business_line in enumerate(business_lines):
    ax = axes[idx]
    ax2 = ax.twinx()

    # Filter data for the current business line
    business_line_data = monthly_data[monthly_data['Business Line'] == business_line]

    # Calculate percentages
    total_loss = business_line_data['Net Loss Amount'].sum()
    total_count = business_line_data['Event Count'].sum()
    business_line_data['Loss Percentage'] = (business_line_data['Net Loss Amount'] / total_loss) * 100
    business_line_data['Count Percentage'] = (business_line_data['Event Count'] / total_count) * 100

    # Plot Net Loss Amount (left y-axis)
    ax.bar(
        business_line_data['Month'], 
        business_line_data['Net Loss Amount'], 
        color='salmon', alpha=0.7, label='Net Loss Amount'
    )

    # Plot Event Count (right y-axis)
    ax2.plot(
        business_line_data['Month'], 
        business_line_data['Event Count'], 
        marker='o', color='skyblue', label='Event Count'
    )

    # Titles and labels
    ax.set_title(f"{business_line} - Monthly Net Loss and Event Count", fontsize=14, fontweight='bold')
    ax.set_xlabel('Month', fontsize=12)
    ax.set_ylabel('Net Loss Amount ($)', fontsize=12, color='salmon')
    ax2.set_ylabel('Event Count', fontsize=12, color='blue')

    # Fix x-axis to show only months
    ax.set_xticks(business_line_data['Month'])
    ax.set_xticklabels(business_line_data['Month'].dt.strftime('%b %Y'), rotation=45, fontsize=10)

    # Legends
    ax.legend(loc='upper left', fontsize=10)
    ax2.legend(loc='upper right', fontsize=10)

    # Grid
    ax.grid(axis='y', linestyle='--', alpha=0.7)

# Adjust layout
plt.tight_layout()
plt.show()
###
with bar and line both  value and percemntage netloss, frequency
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 10000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Adjust negative Net Loss Amounts to zero
df['Net Loss Amount'] = df['Net Loss Amount'].clip(lower=0)

# Extract Year for yearly aggregation
df['Year'] = df['Date'].dt.year

# Group by Business Line and Year
yearly_data = df.groupby(['Business Line', 'Year']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'
}).reset_index()

# Rename columns for clarity
yearly_data.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Plotting for each Business Line
business_lines = yearly_data['Business Line'].unique()
fig, axes = plt.subplots(len(business_lines), 1, figsize=(15, 5 * len(business_lines)))

for idx, business_line in enumerate(business_lines):
    ax = axes[idx]
    ax2 = ax.twinx()

    # Filter data for the current business line
    business_line_data = yearly_data[yearly_data['Business Line'] == business_line]

    # Calculate percentages
    total_loss = business_line_data['Net Loss Amount'].sum()
    total_count = business_line_data['Event Count'].sum()
    business_line_data['Loss Percentage'] = (business_line_data['Net Loss Amount'] / total_loss) * 100
    business_line_data['Count Percentage'] = (business_line_data['Event Count'] / total_count) * 100

    # Plot Net Loss Amount (left y-axis)
    ax.bar(
        business_line_data['Year'], 
        business_line_data['Net Loss Amount'], 
        color='salmon', alpha=0.7, label='Net Loss Amount'
    )

    # Plot Event Count (right y-axis)
    ax2.plot(
        business_line_data['Year'], 
        business_line_data['Event Count'], 
        marker='o', color='skyblue', label='Event Count'
    )

    # Annotate the bars with value and percentage for Net Loss
    for i, v in enumerate(business_line_data['Net Loss Amount']):
        ax.text(
            business_line_data['Year'].iloc[i], v + 1000, f'{v:,.0f} ({business_line_data["Loss Percentage"].iloc[i]:.1f}%)',
            ha='center', fontsize=10, color='black'
        )

    # Annotate the line plot for Event Count
    for i, v in enumerate(business_line_data['Event Count']):
        ax2.text(
            business_line_data['Year'].iloc[i], v + 10, f'{v} ({business_line_data["Count Percentage"].iloc[i]:.1f}%)',
            ha='center', fontsize=10, color='black'
        )

    # Titles and labels
    ax.set_title(f"{business_line} - Yearly Net Loss and Event Count", fontsize=14, fontweight='bold')
    ax.set_xlabel('Year', fontsize=12)
    ax.set_ylabel('Net Loss Amount ($)', fontsize=12, color='salmon')
    ax2.set_ylabel('Event Count', fontsize=12, color='blue')

    # Legends
    ax.legend(loc='upper left', fontsize=10)
    ax2.legend(loc='upper right', fontsize=10)

    # Grid
    ax.grid(axis='y', linestyle='--', alpha=0.7)

# Adjust layout
plt.tight_layout()
plt.show()



####\\
Monthly bar and line chart
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Sample data generation (as per your dataset structure)
np.random.seed(42)
data = {
    'Date': pd.date_range(start='2019-01-01', end='2022-12-31', freq='D'),
    'Business Line': np.random.choice(['Retail', 'Corporate Banking', 'Investment Banking'], size=1461),
    'Event Count': np.random.randint(1, 100, size=1461),
    'Net Loss Amount': np.random.randint(-10000, 100000, size=1461)  # Includes negative values
}
df = pd.DataFrame(data)

# Adjust negative Net Loss Amounts to zero (or use absolute values based on your need)
df['Net Loss Amount'] = df['Net Loss Amount'].clip(lower=0)

# Extract Year-Month for monthly aggregation
df['Month'] = df['Date'].dt.to_period('M')

# Group by Business Line and Month
monthly_data = df.groupby(['Business Line', 'Month']).agg({
    'Event Count': 'sum',
    'Net Loss Amount': 'sum'
}).reset_index()

# Convert Month back to datetime for proper plotting
monthly_data['Month'] = monthly_data['Month'].dt.to_timestamp()

# Calculate percentages for Net Loss and Event Count
monthly_data['Net Loss Amount Percentage'] = (
    monthly_data['Net Loss Amount'] / monthly_data.groupby('Business Line')['Net Loss Amount'].transform('sum') * 100
)
monthly_data['Event Count Percentage'] = (
    monthly_data['Event Count'] / monthly_data.groupby('Business Line')['Event Count'].transform('sum') * 100
)

# Plotting for each business line
business_lines = monthly_data['Business Line'].unique()
fig, axes = plt.subplots(len(business_lines), 1, figsize=(15, 5 * len(business_lines)))

for idx, business_line in enumerate(business_lines):
    ax = axes[idx]
    ax2 = ax.twinx()

    # Filter data for the current business line
    business_line_data = monthly_data[monthly_data['Business Line'] == business_line]

    # Plot Net Loss Amount (left y-axis)
    ax.bar(
        business_line_data['Month'], 
        business_line_data['Net Loss Amount'], 
        color='salmon', alpha=0.7, label='Net Loss Amount'
    )
    for i, value in enumerate(business_line_data['Net Loss Amount']):
        ax.text(
            business_line_data['Month'].iloc[i], value, 
            f"${value:,.0f}\n({business_line_data['Net Loss Amount Percentage'].iloc[i]:.1f}%)", 
            ha='center', va='bottom', fontsize=8, rotation=90
        )

    # Plot Event Count (right y-axis)
    ax2.plot(
        business_line_data['Month'], 
        business_line_data['Event Count'], 
        marker='o', color='skyblue', label='Event Count'
    )
    for i, value in enumerate(business_line_data['Event Count']):
        ax2.text(
            business_line_data['Month'].iloc[i], value, 
            f"{value}\n({business_line_data['Event Count Percentage'].iloc[i]:.1f}%)", 
            ha='center', va='bottom', fontsize=8, color='blue', rotation=90
        )

    # Titles and labels
    ax.set_title(f"{business_line} - Monthly Net Loss and Event Count", fontsize=14, fontweight='bold')
    ax.set_xlabel('Month', fontsize=12)
    ax.set_ylabel('Net Loss Amount ($)', fontsize=12, color='salmon')
    ax2.set_ylabel('Event Count', fontsize=12, color='blue')

    # Fix x-axis to show only months
    ax.set_xticks(business_line_data['Month'])
    ax.set_xticklabels(business_line_data['Month'].dt.strftime('%b %Y'), rotation=45, fontsize=10)

    # Legends
    ax.legend(loc='upper left', fontsize=10)
    ax2.legend(loc='upper right', fontsize=10)

    # Grid
    ax.grid(axis='y', linestyle='--', alpha=0.7)

# Adjust layout
plt.tight_layout()
plt.show()



#####3


#donut chart
#only percentage distribution but not on legend
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Add Year and Month columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Filter negative Net Loss Amount values
df = df[df['Net Loss Amount'] > 0]

# Group data by Business Line, Year, Month, and Event Type
grouped = df.groupby(['Business Line', 'Year', 'Month', 'Event Type']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'    # Net Loss Amount
}).reset_index()
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate charts
business_lines = grouped['Business Line'].unique()
for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Iterate through each year
    years = business_line_data['Year'].unique()
    for year in years:
        year_data = business_line_data[business_line_data['Year'] == year]
        
        # Iterate through each month
        months = year_data['Month'].unique()
        for month in months:
            month_data = year_data[year_data['Month'] == month]

            # Prepare data for charts
            labels = month_data['Event Type']
            sizes_event = month_data['Event Count']
            sizes_loss = month_data['Net Loss Amount']

            if len(labels) == 0:
                continue  # Skip empty data

            # Create subplots for Event Count and Net Loss Amount
            fig, axes = plt.subplots(1, 2, figsize=(14, 7))

            # Donut chart for Event Count
            wedges_event, texts_event, autotexts_event = axes[0].pie(
                sizes_event, labels=labels, autopct=lambda pct: f"{pct:.1f}%\n({int(pct * sizes_event.sum() / 100)})",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_event = plt.Circle((0, 0), 0.70, fc='white')
            axes[0].add_artist(center_circle_event)
            axes[0].set_title(f"Event Count Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Donut chart for Net Loss Amount
            wedges_loss, texts_loss, autotexts_loss = axes[1].pie(
                sizes_loss, labels=labels, autopct=lambda pct: f"{pct:.1f}%\n({int(pct * sizes_loss.sum() / 100)})",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_loss = plt.Circle((0, 0), 0.70, fc='white')
            axes[1].add_artist(center_circle_loss)
            axes[1].set_title(f"Net Loss Amount Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Add legends
            axes[0].legend(wedges_event, labels, title="Event Types", loc="best", fontsize=10)
            axes[1].legend(wedges_loss, labels, title="Event Types", loc="best", fontsize=10)

            # Adjust layout and display
            plt.tight_layout()
            plt.show()
################33
#value and percentage together on dnout chart
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Add Year and Month columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Filter negative Net Loss Amount values
df = df[df['Net Loss Amount'] > 0]

# Group data by Business Line, Year, Month, and Event Type
grouped = df.groupby(['Business Line', 'Year', 'Month', 'Event Type']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'    # Net Loss Amount
}).reset_index()
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate charts
business_lines = grouped['Business Line'].unique()
for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Iterate through each year
    years = business_line_data['Year'].unique()
    for year in years:
        year_data = business_line_data[business_line_data['Year'] == year]
        
        # Iterate through each month
        months = year_data['Month'].unique()
        for month in months:
            month_data = year_data[year_data['Month'] == month]

            # Prepare data for charts
            labels = month_data['Event Type']
            sizes_event = month_data['Event Count']
            sizes_loss = month_data['Net Loss Amount']

            if len(labels) == 0:
                continue  # Skip empty data

            # Create subplots for Event Count and Net Loss Amount
            fig, axes = plt.subplots(1, 2, figsize=(14, 7))

            # Prepare legend labels with values and percentages for Event Count
            total_event = sizes_event.sum()
            legend_event = [
                f"{label}: {value} ({value / total_event:.1%})"
                for label, value in zip(labels, sizes_event)
            ]

            # Donut chart for Event Count
            wedges_event, texts_event, autotexts_event = axes[0].pie(
                sizes_event, labels=None, autopct=lambda pct: f"{pct:.1f}%",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_event = plt.Circle((0, 0), 0.70, fc='white')
            axes[0].add_artist(center_circle_event)
            axes[0].set_title(f"Event Count Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Add legend for Event Count
            axes[0].legend(wedges_event, legend_event, title="Event Types", loc="best", fontsize=10)

            # Prepare legend labels with values and percentages for Net Loss Amount
            total_loss = sizes_loss.sum()
            legend_loss = [
                f"{label}: ${value:.2f} ({value / total_loss:.1%})"
                for label, value in zip(labels, sizes_loss)
            ]

            # Donut chart for Net Loss Amount
            wedges_loss, texts_loss, autotexts_loss = axes[1].pie(
                sizes_loss, labels=None, autopct=lambda pct: f"{pct:.1f}%",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_loss = plt.Circle((0, 0), 0.70, fc='white')
            axes[1].add_artist(center_circle_loss)
            axes[1].set_title(f"Net Loss Amount Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Add legend for Net Loss Amount
            axes[1].legend(wedges_loss, legend_loss, title="Event Types", loc="best", fontsize=10)

            # Adjust layout and display
            plt.tight_layout()
            plt.show()

#######333
#only percetage donut cgart legend busines --> event typoe for 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Add Year and Month columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Filter negative Net Loss Amount values
df = df[df['Net Loss Amount'] > 0]

# Group data by Business Line, Year, Month, and Event Type
grouped = df.groupby(['Business Line', 'Year', 'Month', 'Event Type']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'    # Net Loss Amount
}).reset_index()
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate charts
business_lines = grouped['Business Line'].unique()
for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Iterate through each year
    years = business_line_data['Year'].unique()
    for year in years:
        year_data = business_line_data[business_line_data['Year'] == year]
        
        # Iterate through each month
        months = year_data['Month'].unique()
        for month in months:
            month_data = year_data[year_data['Month'] == month]

            # Prepare data for charts
            labels = month_data['Event Type']
            sizes_event = month_data['Event Count']
            sizes_loss = month_data['Net Loss Amount']

            if len(labels) == 0:
                continue  # Skip empty data

            # Create subplots for Event Count and Net Loss Amount
            fig, axes = plt.subplots(1, 2, figsize=(14, 7))

            # Prepare legend labels with percentages for Event Count
            total_event = sizes_event.sum()
            legend_event = [
                f"{label}: {value / total_event:.1%}"
                for label, value in zip(labels, sizes_event)
            ]

            # Donut chart for Event Count
            wedges_event, texts_event, autotexts_event = axes[0].pie(
                sizes_event, labels=None, autopct=lambda pct: f"{pct:.1f}%",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_event = plt.Circle((0, 0), 0.70, fc='white')
            axes[0].add_artist(center_circle_event)
            axes[0].set_title(f"Event Count Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Add legend for Event Count
            axes[0].legend(wedges_event, legend_event, title="Event Types (%)", loc="best", fontsize=10)

            # Prepare legend labels with percentages for Net Loss Amount
            total_loss = sizes_loss.sum()
            legend_loss = [
                f"{label}: {value / total_loss:.1%}"
                for label, value in zip(labels, sizes_loss)
            ]

            # Donut chart for Net Loss Amount
            wedges_loss, texts_loss, autotexts_loss = axes[1].pie(
                sizes_loss, labels=None, autopct=lambda pct: f"{pct:.1f}%",
                startangle=90, pctdistance=0.85, textprops=dict(color="w")
            )
            center_circle_loss = plt.Circle((0, 0), 0.70, fc='white')
            axes[1].add_artist(center_circle_loss)
            axes[1].set_title(f"Net Loss Amount Distribution\n{business_line} - {year}/{month}", fontsize=12, fontweight='bold')

            # Add legend for Net Loss Amount
            axes[1].legend(wedges_loss, legend_loss, title="Event Types (%)", loc="best", fontsize=10)

            # Adjust layout and display
            plt.tight_layout()
            plt.show()

########333
for frequenmcy cont and vlaue %
#with value and percetahe
#frequency
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Add Year and Month columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Group data by Business Line, Year, Month, and Event Type
grouped = df.groupby(['Business Line', 'Year', 'Month', 'Event Type']).agg({
    'Unique Event ID': 'count',  # Event Count
}).reset_index()
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate charts
business_lines = grouped['Business Line'].unique()
for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Iterate through each year
    years = business_line_data['Year'].unique()
    for year in years:
        year_data = business_line_data[business_line_data['Year'] == year]
        
        # Pivot the data for Event Count distribution
        monthly_event_count_pivot = year_data.pivot_table(
            index='Month', columns='Event Type', values='Event Count', aggfunc='sum', fill_value=0
        )

        # Ensure all 12 months are represented
        monthly_event_count_pivot = monthly_event_count_pivot.reindex(range(1, 13), fill_value=0)

        # Plot the stacked bar chart for Event Count
        fig, ax = plt.subplots(figsize=(12, 7))

        # Plot the stacked bar chart for Event Count (monthly)
        monthly_event_count_pivot.plot(kind='bar', stacked=True, ax=ax, colormap='tab10')

        # Add labels with both value and percentage (Event Count percentage)
        for p in ax.patches:
            height = p.get_height()
            width = p.get_width()
            x = p.get_x() + width / 2
            y = p.get_y() + height / 2

            # Calculate percentage for each segment
            total_height = p.get_height() + p.get_y()
            percentage = (height / total_height) * 100 if total_height != 0 else 0

            # Display value and percentage
            value = int(height)
            ax.annotate(f'{value}\n({percentage:.1f}%)', (x, y), ha='center', va='center', fontsize=10, color='white')

        # Title and labels
        ax.set_title(f"Event Count Distribution - {business_line} ({year})", fontsize=14, fontweight='bold')
        ax.set_xlabel('Month', fontsize=12)
        ax.set_ylabel('Event Count', fontsize=12)

        # Set x-ticks to all 12 months (January to December)
        ax.set_xticks(range(12))
        ax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=12)

        ax.legend(title="Event Types", loc='upper left', fontsize=10)

        # Adjust layout and display
        plt.tight_layout()
        plt.show()

###
net loss stackeed chart
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Function to generate random dates
def random_dates(start, end, n=10):
    return [start + timedelta(days=np.random.randint(0, (end - start).days)) for _ in range(n)]

# Parameters
num_records = 1000
start_date = datetime.now() - timedelta(days=4*365)
end_date = datetime.now()

# Expanded categories
business_lines = [
    "Retail", "Corporate Banking", "Investment Banking", "Insurance",
    "Wealth Management", "Asset Management", "Private Banking",
    "Credit Card Services", "Mortgage Lending", "Financial Advisory"
]

event_types = [
    "Fraud", "System Failure", "Theft", "Compliance", "Natural Disaster",
    "Cyber Attack", "Market Risk", "Operational Error", "Vendor Risk", "Regulatory Violation"
]

# Generate data
data = {
    "Date": random_dates(start_date, end_date, num_records),
    "Unique Event ID": [f"EID{str(i).zfill(5)}" for i in range(num_records)],
    "Event Type": np.random.choice(event_types, num_records),
    "Business Line": np.random.choice(business_lines, num_records),
    "Event Description": np.random.choice(
        [
            "Unauthorized transaction", "Server downtime", "Lost assets", 
            "Regulatory fines", "Data breach", "Network failure", 
            "Inadequate compliance", "Financial misstatement", 
            "Supplier issues", "Internal fraud"
        ],
        num_records
    ),
    "Net Loss Amount": np.random.choice(
        [np.random.uniform(-10000, 0) for _ in range(num_records // 2)] + 
        [np.random.uniform(0, 10000) for _ in range(num_records // 2)],
        num_records
    )
}

# Create DataFrame
df = pd.DataFrame(data)

# Add Year and Month columns
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month

# Filter negative Net Loss Amount values
df = df[df['Net Loss Amount'] > 0]

# Group data by Business Line, Year, Month, and Event Type
grouped = df.groupby(['Business Line', 'Year', 'Month', 'Event Type']).agg({
    'Unique Event ID': 'count',  # Event Count
    'Net Loss Amount': 'sum'    # Net Loss Amount
}).reset_index()
grouped.rename(columns={'Unique Event ID': 'Event Count'}, inplace=True)

# Iterate through each business line and generate charts
business_lines = grouped['Business Line'].unique()
for business_line in business_lines:
    business_line_data = grouped[grouped['Business Line'] == business_line]
    
    # Iterate through each year
    years = business_line_data['Year'].unique()
    for year in years:
        year_data = business_line_data[business_line_data['Year'] == year]
        
        # Pivot the data for Net Loss Amount distribution
        monthly_net_loss_pivot = year_data.pivot_table(
            index='Month', columns='Event Type', values='Net Loss Amount', aggfunc='sum', fill_value=0
        )

        # Ensure all 12 months are represented
        monthly_net_loss_pivot = monthly_net_loss_pivot.reindex(range(1, 13), fill_value=0)

        # Plot the stacked bar chart for Net Loss Amount
        fig, ax = plt.subplots(figsize=(12, 7))

        # Plot the stacked bar chart for Net Loss Amount (monthly)
        monthly_net_loss_pivot.plot(kind='bar', stacked=True, ax=ax, colormap='tab10')

        # Add labels with both value and percentage (Net Loss Amount percentage)
        for p in ax.patches:
            height = p.get_height()
            width = p.get_width()
            x = p.get_x() + width / 2
            y = p.get_y() + height / 2

            # Calculate percentage for each segment
            total_height = p.get_height() + p.get_y()
            percentage = (height / total_height) * 100 if total_height != 0 else 0

            # Display value and percentage
            value = int(height)
            ax.annotate(f'{value}\n({percentage:.1f}%)', (x, y), ha='center', va='center', fontsize=10, color='white')

        # Title and labels
        ax.set_title(f"Net Loss Amount Distribution - {business_line} ({year})", fontsize=14, fontweight='bold')
        ax.set_xlabel('Month', fontsize=12)
        ax.set_ylabel('Net Loss Amount', fontsize=12)

        # Set x-ticks to all 12 months (January to December)
        ax.set_xticks(range(12))
        ax.set_xticklabels(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=12)

        ax.legend(title="Event Types", loc='upper left', fontsize=10)

        # Adjust layout and display
        plt.tight_layout()
        plt.show()

