
import matplotlib.pyplot as plt
import pandas as pd

# Example DataFrame
data = {
    'Date': ['2021-01-15', '2021-07-30', '2022-03-10', '2022-11-20', '2023-06-15'],
    'Net Loss Amount': [10000, 15000, 20000, 25000, 30000]
}
df = pd.DataFrame(data)

# Extract the year from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year

# Calculate yearly total net loss and percentage
yearly_loss = df.groupby('Year')['Net Loss Amount'].sum().reset_index()
total_loss = yearly_loss['Net Loss Amount'].sum()
yearly_loss['Percentage'] = (yearly_loss['Net Loss Amount'] / total_loss) * 100

# Plot the data
plt.figure(figsize=(12, 8))
bars = plt.bar(
    yearly_loss['Year'],
    yearly_loss['Net Loss Amount'],
    color='steelblue',
    edgecolor='black',
    alpha=0.8
)

# Annotate the bars with values and percentages
for bar, loss, pct in zip(bars, yearly_loss['Net Loss Amount'], yearly_loss['Percentage']):
    height = bar.get_height()
    plt.text(
        bar.get_x() + bar.get_width() / 2,
        height,
        f"{loss:,.0f}\n({pct:.1f}%)",
        ha="center",
        va="bottom",
        fontsize=10,
        color="black"
    )

# Title and labels
plt.title("Year-wise Net Loss (Values and Percentages)", fontsize=16, fontweight="bold")
plt.xlabel("Year", fontsize=14)
plt.ylabel("Net Loss Amount", fontsize=14)

# Set x-axis ticks to be integers (years)
plt.xticks(yearly_loss['Year'], fontsize=12)

# Add gridlines
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Display the plot
plt.tight_layout()
plt.show()



***
value count and percenon loss by month and same for event count
Here's an enhanced version of the bar graph that includes event count values and percentages on each bar as labels as well as a legend indicating what the bars and percentages represent.

Combined Bar Graph Code with Enhanced Features
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Extract year and month from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year
df['Month'] = pd.to_datetime(df['Date']).dt.month

# Filter for the last 4 years
last_4_years = sorted(df['Year'].unique())[-4:]
filtered_df = df[df['Year'].isin(last_4_years)]

# Group by year and month and calculate event counts
monthly_event_counts = filtered_df.groupby(['Year', 'Month'])['Unique Event ID'].count().reset_index()

# Calculate percentage contributions
total_counts_per_year = monthly_event_counts.groupby('Year')['Unique Event ID'].transform('sum')
monthly_event_counts['Percentage'] = (monthly_event_counts['Unique Event ID'] / total_counts_per_year) * 100

# Create month-year labels for x-axis
monthly_event_counts['Month-Year'] = monthly_event_counts['Year'].astype(str) + '-' + monthly_event_counts['Month'].astype(str).zfill(2)

# --- Plotting the Bar Chart ---
fig, ax = plt.subplots(figsize=(16, 8))

# Plot bars for event counts
bars = ax.bar(
    monthly_event_counts['Month-Year'], 
    monthly_event_counts['Unique Event ID'], 
    color='skyblue', 
    edgecolor='black', 
    alpha=0.8, 
    label='Event Counts'
)

# Add absolute values and percentages on the bars
for bar, count, percentage in zip(bars, monthly_event_counts['Unique Event ID'], monthly_event_counts['Percentage']):
    height = bar.get_height()
    ax.text(
        bar.get_x() + bar.get_width() / 2, 
        height + 2, 
        f"{count} ({percentage:.1f}%)", 
        ha='center', 
        fontsize=9, 
        rotation=90
    )

# Customizing x-axis labels (rotate for clarity)
plt.xticks(
    ticks=np.arange(len(monthly_event_counts['Month-Year'])), 
    labels=monthly_event_counts['Month-Year'], 
    rotation=45, 
    fontsize=10
)

# Adding titles and labels
ax.set_title("Monthly Event Counts and Percentage Contributions (Last 4 Years)", fontsize=16, fontweight='bold')
ax.set_xlabel("Month-Year", fontsize=14)
ax.set_ylabel("Event Counts", fontsize=14)

# Adding gridlines
ax.grid(axis='y', linestyle='--', alpha=0.6)

# Add legend to indicate what the graph represents
ax.legend(
    title="Legend",
    loc='upper right',
    labels=["Event Counts (Bars)", "Percentage (Labels on Bars)"]
)

# Adjust layout for clarity
plt.tight_layout()
plt.show()
Key Features:
Bar Chart:

Each bar represents the total event count for a specific month and year.
Annotations on Bars:

Each bar shows the event count value and its percentage contribution for the respective year in the format count (percentage%).
Legend:

Explains what the bars and annotations represent:
Bars represent event counts.
Labels represent the counts and their percentage contributions.
X-axis Labels:

Month-year combinations (e.g., 2021-01 for January 2021) are displayed and rotated for readability.
Gridlines:

Light gridlines on the y-axis improve visual clarity.
This graph provides a clear and visually appealing way to show both event counts and their percentage contributions over the last four years, including all requested enhancements. Let me know if you'd like further refinements!






You said:
Similarly I need graph for net loss amount 
ChatGPT said:
ChatGPT
Here's the code to create a monthly bar graph for net loss amounts (considering all amounts as positive), with the net loss value and its percentage contribution displayed on each bar, along with a legend to clarify what the graph represents.

Combined Bar Graph Code for Net Loss Amounts
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Ensure all Net Loss Amounts are positive
df['Net Loss Absolute'] = df['Net Loss Amount'].abs()

# Extract year and month from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year
df['Month'] = pd.to_datetime(df['Date']).dt.month

# Filter for the last 4 years
last_4_years = sorted(df['Year'].unique())[-4:]
filtered_df = df[df['Year'].isin(last_4_years)]

# Group by year and month and calculate net loss amounts
monthly_net_loss = filtered_df.groupby(['Year', 'Month'])['Net Loss Absolute'].sum().reset_index()

# Calculate percentage contributions
total_loss_per_year = monthly_net_loss.groupby('Year')['Net Loss Absolute'].transform('sum')
monthly_net_loss['Percentage'] = (monthly_net_loss['Net Loss Absolute'] / total_loss_per_year) * 100

# Create month-year labels for x-axis
monthly_net_loss['Month-Year'] = monthly_net_loss['Year'].astype(str) + '-' + monthly_net_loss['Month'].astype(str).zfill(2)

# --- Plotting the Bar Chart ---
fig, ax = plt.subplots(figsize=(16, 8))

# Plot bars for net loss amounts
bars = ax.bar(
    monthly_net_loss['Month-Year'], 
    monthly_net_loss['Net Loss Absolute'], 
    color='orange', 
    edgecolor='black', 
    alpha=0.8, 
    label='Net Loss Amount (Absolute)'
)

# Add absolute values and percentages on the bars
for bar, loss, percentage in zip(bars, monthly_net_loss['Net Loss Absolute'], monthly_net_loss['Percentage']):
    height = bar.get_height()
    ax.text(
        bar.get_x() + bar.get_width() / 2, 
        height + max(monthly_net_loss['Net Loss Absolute']) * 0.01,  # Adjust position slightly above bar
        f"{loss:,.0f} ({percentage:.1f}%)", 
        ha='center', 
        fontsize=9, 
        rotation=90
    )

# Customizing x-axis labels (rotate for clarity)
plt.xticks(
    ticks=np.arange(len(monthly_net_loss['Month-Year'])), 
    labels=monthly_net_loss['Month-Year'], 
    rotation=45, 
    fontsize=10
)

# Adding titles and labels
ax.set_title("Monthly Net Loss Amounts and Percentage Contributions (Last 4 Years)", fontsize=16, fontweight='bold')
ax.set_xlabel("Month-Year", fontsize=14)
ax.set_ylabel("Net Loss Amount (in Absolute USD)", fontsize=14)

# Adding gridlines
ax.grid(axis='y', linestyle='--', alpha=0.6)

# Add legend to indicate what the graph represents
ax.legend(
    title="Legend",
    loc='upper right',
    labels=["Net Loss Amount (Bars)", "Percentage (Labels on Bars)"]
)

# Adjust layout for clarity
plt.tight_layout()
plt.show()
Key Features:
Bar Chart:

Each bar represents the total net loss amount for a specific month and year.
Annotations on Bars:

Each bar shows the net loss value and its percentage contribution to the yearly total in the format value (percentage%).
Legend:

Explains that:
Bars represent net loss amounts.
Labels on the bars show the net loss value and its percentage contribution.
X-axis Labels:

Month-year combinations (e.g., 2021-01 for January 2021) are displayed and rotated for readability.
Custom Y-axis:

The y-axis scales dynamically to accommodate the net loss values.










***

*** months wise
need month wise for the 4 years.
ChatGPT said:
ChatGPT
Hereâ€™s how you can create a month-wise bar graph for the last 4 years, displaying the total net loss (absolute values) for each month. The graph will also show the loss value and its percentage contribution to the total on the bars.

Code Implementation
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd

# Assuming `df` contains your data and `Net Loss Amount` and `Date` are relevant columns
# Convert all Net Loss Amounts to absolute values
df['Net Loss Absolute'] = df['Net Loss Amount'].abs()

# Extract year and month from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year
df['Month'] = pd.to_datetime(df['Date']).dt.month

# Filter for the last 4 years
last_4_years = sorted(df['Year'].unique())[-4]
filtered_df = df[df['Year'] >= last_4_years]

# Group by year and month and calculate total Net Loss
monthly_loss = filtered_df.groupby(['Year', 'Month'])['Net Loss Absolute'].sum().reset_index()

# Create a pivot table for visualization (Years as columns, Months as rows)
monthly_pivot = monthly_loss.pivot(index='Month', columns='Year', values='Net Loss Absolute')

# Calculate percentage contribution of each month for each year
monthly_percentage = monthly_pivot.divide(monthly_pivot.sum(axis=0), axis=1) * 100

# --- Plotting the Bar Chart ---
fig, axes = plt.subplots(2, 1, figsize=(14, 12), sharex=True)

# Bar Chart: Net Loss Values
monthly_pivot.plot(kind='bar', ax=axes[0], edgecolor='black', colormap='viridis')
axes[0].set_title("Month-wise Net Loss for Last 4 Years (Absolute Values)", fontsize=16, fontweight="bold")
axes[0].set_ylabel("Net Loss (Absolute, in USD)", fontsize=14)
axes[0].legend(title="Year", fontsize=10)
axes[0].grid(axis="y", linestyle="--", alpha=0.7)

# Annotate bars with absolute values
for year, bars in zip(monthly_pivot.columns, axes[0].patches):
    axes[0].text(bars.get_x() + bars.get_width() / 2, bars.get_height() + 0.02 * monthly_pivot.values.max(),
                 f"{bars.get_height():,.0f}", ha='center', fontsize=9, rotation=90)

# Bar Chart: Percentages
monthly_percentage.plot(kind='bar', ax=axes[1], edgecolor='black', colormap='plasma')
axes[1].set_title("Month-wise Net Loss for Last 4 Years (Percentages)", fontsize=16, fontweight="bold")
axes[1].set_ylabel("Percentage Contribution (%)", fontsize=14)
axes[1].legend(title="Year", fontsize=10)
axes[1].grid(axis="y", linestyle="--", alpha=0.7)

# Annotate bars with percentages
for year, bars in zip(monthly_percentage.columns, axes[1].patches):
    axes[1].text(bars.get_x() + bars.get_width() / 2, bars.get_height() + 0.02 * 100,
                 f"{bars.get_height():.1f}%", ha='center', fontsize=9, rotation=90)

# Final adjustments
plt.xticks(ticks=range(12), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=12)
plt.xlabel("Month", fontsize=14)
plt.tight_layout()
plt.show()
Explanation
Data Preparation:

The Net Loss Amount is converted to absolute values.
Filtered for the last 4 years using the Year column.
Grouped by Year and Month to calculate total Net Loss.
Pivot Table:

Created a pivot table with Month as rows and Year as columns to facilitate plotting.
Visualization:

Two separate bar charts are plotted:
Net Loss Values: Displays absolute values for each year and month.
Percentages: Shows each monthâ€™s contribution to the yearly total as percentages.
Annotations:

Absolute values and percentages are displayed on top of their respective bars.
Color Maps:

Different colormaps (viridis and plasma) are used to differentiate charts.
Let me know if you'd like further customization or clarification!


2/2






You said:
Do the smae for event counts
ChatGPT said:
ChatGPT
Hereâ€™s how you can modify the same logic to create month-wise bar graphs for event counts over the last 4 years, with the same approach to include values and percentage contributions on the charts.

Code for Event Counts
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd

# Assuming `df` contains your data and 'Unique Event ID' is relevant for event counts
# Extract year and month from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year
df['Month'] = pd.to_datetime(df['Date']).dt.month

# Filter for the last 4 years
last_4_years = sorted(df['Year'].unique())[-4]
filtered_df = df[df['Year'] >= last_4_years]

# Group by year and month and calculate event counts
monthly_event_counts = filtered_df.groupby(['Year', 'Month'])['Unique Event ID'].count().reset_index()

# Create a pivot table for visualization (Years as columns, Months as rows)
event_count_pivot = monthly_event_counts.pivot(index='Month', columns='Year', values='Unique Event ID')

# Calculate percentage contribution of each month for each year
event_count_percentage = event_count_pivot.divide(event_count_pivot.sum(axis=0), axis=1) * 100

# --- Plotting the Bar Chart ---
fig, axes = plt.subplots(2, 1, figsize=(14, 12), sharex=True)

# Bar Chart: Event Counts
event_count_pivot.plot(kind='bar', ax=axes[0], edgecolor='black', colormap='viridis')
axes[0].set_title("Month-wise Event Counts for Last 4 Years (Absolute Values)", fontsize=16, fontweight="bold")
axes[0].set_ylabel("Event Counts", fontsize=14)
axes[0].legend(title="Year", fontsize=10)
axes[0].grid(axis="y", linestyle="--", alpha=0.7)

# Annotate bars with absolute values
for bars in axes[0].patches:
    height = bars.get_height()
    if height > 0:  # Annotate only for positive values
        axes[0].text(bars.get_x() + bars.get_width() / 2, height + 0.02 * event_count_pivot.values.max(),
                     f"{height:.0f}", ha='center', fontsize=9, rotation=90)

# Bar Chart: Percentages
event_count_percentage.plot(kind='bar', ax=axes[1], edgecolor='black', colormap='plasma')
axes[1].set_title("Month-wise Event Counts for Last 4 Years (Percentages)", fontsize=16, fontweight="bold")
axes[1].set_ylabel("Percentage Contribution (%)", fontsize=14)
axes[1].legend(title="Year", fontsize=10)
axes[1].grid(axis="y", linestyle="--", alpha=0.7)

# Annotate bars with percentages
for bars in axes[1].patches:
    height = bars.get_height()
    if height > 0:  # Annotate only for positive percentages
        axes[1].text(bars.get_x() + bars.get_width() / 2, height + 0.02 * 100,
                     f"{height:.1f}%", ha='center', fontsize=9, rotation=90)

# Final adjustments
plt.xticks(ticks=range(12), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 
                                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], fontsize=12)
plt.xlabel("Month", fontsize=14)
plt.tight_layout()
plt.show()
Explanation
Data Preparation:

Grouped the data by Year and Month to count the number of unique events in each month.
Used .count() on the Unique Event ID column to get event counts.
Pivot Table:

Created a pivot table where Month is the index and Year forms the columns, showing event counts for each year.
Calculations:

Calculated the percentage contribution of each month to the yearly event count totals.
Visualization:

Two bar charts:
Event Counts: Shows the absolute number of events per month.
Percentages: Displays the monthly percentage contributions.
Annotations:

Absolute event counts are displayed on the first chart.
Percentage values are displayed on the second chart.
Legends and Axis Labels:

Used custom legends and titles for clarity.
Let me know if you need additional adjustments or enhancements!














****
I need bar graph fro year wise net loss with loss value and percentage on bar graph with proper legened 
ChatGPT said:
ChatGPT
Hereâ€™s a bar graph that displays year-wise Net Loss values with loss values and percentages displayed on the bars. This will also include a proper legend for clarity.

Code Implementation
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd

# Assuming `df` contains your data and `Net Loss Amount` and `Date` are the relevant columns
# Filter for positive Net Loss values
positive_df = df[df['Net Loss Amount'] > 0]

# Extract year from the Date column
positive_df['Year'] = pd.to_datetime(positive_df['Date']).dt.year

# Group by year and calculate total Net Loss
yearly_loss = positive_df.groupby('Year')['Net Loss Amount'].sum()

# Calculate percentage contribution of each year
total_loss = yearly_loss.sum()
yearly_loss_percentage = (yearly_loss / total_loss) * 100

# Plotting the bar graph
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.bar(yearly_loss.index, yearly_loss, color="skyblue", edgecolor="black")

# Adding percentage and values on the bars
for bar, value, percentage in zip(bars, yearly_loss, yearly_loss_percentage):
    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 0.02 * total_loss, 
            f"{value:,.0f}\n({percentage:.2f}%)", ha='center', fontsize=10, color="black")

# Adding labels, title, and legend
ax.set_title("Year-wise Net Loss with Values and Percentages", fontsize=16, fontweight="bold")
ax.set_xlabel("Year", fontsize=14)
ax.set_ylabel("Net Loss Amount (in USD)", fontsize=14)
ax.legend(["Net Loss Amount"], loc="upper right", fontsize=12)
ax.grid(axis="y", linestyle="--", alpha=0.7)

# Show the plot
plt.tight_layout()
plt.show()
Explanation of the Code
Data Preparation:

Filter for positive Net Loss values.
Extract the year from the Date column.
Group the data by year and calculate total Net Loss for each year.
Compute the percentage contribution of each year's loss to the total loss.
Bar Graph:

Each bar represents the total Net Loss for a particular year.
Values (Net Loss amount) and percentages are displayed on top of each bar.
Legend:

The legend explains the content of the graph (Net Loss Amount).
Customization:

Text annotations on the bars include both the value and percentage.
A grid is added to enhance readability.
Sample Output
The graph will show:

A bar for each year representing the Net Loss amount.
Text annotations on each bar, such as:
Value (e.g., 1,200,000)
Percentage (e.g., (25.30%))
Legend: "Net Loss Amount"
Title: Clearly describes the chart's purpose.





You said:
Consider all the amount positive. Negative 
ChatGPT said:
ChatGPT
If all amounts, including negative values, are to be considered as positive, we can use the absolute values of the Net Loss Amount column in the calculations and visualization. Here's the modified code:

Code Implementation
python
Copy code
import matplotlib.pyplot as plt
import pandas as pd

# Assuming `df` contains your data and `Net Loss Amount` and `Date` are relevant columns
# Convert all Net Loss Amounts to absolute values
df['Net Loss Absolute'] = df['Net Loss Amount'].abs()

# Extract year from the Date column
df['Year'] = pd.to_datetime(df['Date']).dt.year

# Group by year and calculate total Net Loss
yearly_loss = df.groupby('Year')['Net Loss Absolute'].sum()

# Calculate percentage contribution of each year
total_loss = yearly_loss.sum()
yearly_loss_percentage = (yearly_loss / total_loss) * 100

# Plotting the bar graph
fig, ax = plt.subplots(figsize=(12, 8))
bars = ax.bar(yearly_loss.index, yearly_loss, color="coral", edgecolor="black")

# Adding percentage and values on the bars
for bar, value, percentage in zip(bars, yearly_loss, yearly_loss_percentage):
    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height() + 0.02 * total_loss, 
            f"{value:,.0f}\n({percentage:.2f}%)", ha='center', fontsize=10, color="black")

# Adding labels, title, and legend
ax.set_title("Year-wise Net Loss (Absolute) with Values and Percentages", fontsize=16, fontweight="bold")
ax.set_xlabel("Year", fontsize=14)
ax.set_ylabel("Net Loss Amount (Absolute, in USD)", fontsize=14)
ax.legend(["Net Loss Amount"], loc="upper right", fontsize=12)
ax.grid(axis="y", linestyle="--", alpha=0.7)

# Show the plot
plt.tight_layout()
plt.show()
Explanation of the Changes
Absolute Values:

All Net Loss Amounts are converted to positive values using the .abs() method.
This ensures both positive and negative amounts are treated equally.
Data Grouping:

Grouped data by Year to calculate total yearly Net Loss (absolute values).
Annotations:

The graph includes annotations on each bar displaying:
The total Net Loss (absolute value).
The percentage contribution of that year's loss to the total.
Bar Colors:

Used a consistent and visually distinct color ("coral") for the bars.
Output
Bar Chart:
Each bar represents the total Net Loss (absolute value) for a particular year.
Text on the bars shows both the absolute Net Loss value and its percentage of the total.
Legend:
Explains the data being visualized (Net Loss Amount).
Gridlines:
Horizontal gridlines improve readability of the chart.
Let me know if you'd like further customizations!


2/2










ChatGPT can make mistakes. Check 
